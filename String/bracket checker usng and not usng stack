// Java program for checking 
// balanced brackets 
import java.util.*; 

public class BalancedBrackets { 

	// function to check if brackets are balanced 
	static boolean areBracketsBalanced(String expr) 
	{ 
		// Using ArrayDeque is faster than using Stack class 
		Deque<Character> stack 
			= new ArrayDeque<Character>(); 

		// Traversing the Expression 
		for (int i = 0; i < expr.length(); i++) 
		{ 
			char x = expr.charAt(i); 

			if (x == '(' || x == '[' || x == '{') 
			{ 
				// Push the element in the stack 
				stack.push(x); 
				continue; 
			} 

			// IF current current character is not opening 
			// bracket, then it must be closing. So stack 
			// cannot be empty at this point. 
			if (stack.isEmpty()) 
				return false; 
			char check; 
			switch (x) { 
			case ')': 
				check = stack.pop(); 
				if (check == '{' || check == '[') 
					return false; 
				break; 

			case '}': 
				check = stack.pop(); 
				if (check == '(' || check == '[') 
					return false; 
				break; 

			case ']': 
				check = stack.pop(); 
				if (check == '(' || check == '{') 
					return false; 
				break; 
			} 
		} 

		// Check Empty Stack 
		return (stack.isEmpty()); 
	} 

	// Driver code 
	public static void main(String[] args) 
	{ 
		String expr = "([{}])"; 

		// Function call 
		if (areBracketsBalanced(expr)) 
			System.out.println("Balanced "); 
		else
			System.out.println("Not Balanced "); 
	} 
} 






// Not usng stack

// Java program to check if parenthesis are
// balanced or not in an expression.
import java.util.Arrays;

class GFG {

	static char findClosing(char c)
	{
		if (c == '(')
			return ')';
		if (c == '{')
			return '}';
		if (c == '[')
			return ']';
		return Character.MIN_VALUE;
	}

	// function to check if parenthesis are
	// balanced.
	static boolean check(char expr[], int n)
	{
		// Base cases
		if (n == 0)
			return true;
		if (n == 1)
			return false;
		if (expr[0] == ')' || expr[0] == '}' || expr[0] == ']')
			return false;

		// Search for closing bracket for first
		// opening bracket.
		char closing = findClosing(expr[0]);

		// count is used to handle cases like
		// "((()))". We basically need to
		// consider matching closing bracket.
		int i, count = 0;
		for (i = 1; i < n; i++) {
			if (expr[i] == expr[0])
				count++;
			if (expr[i] == closing) {
				if (count == 0)
					break;
				count--;
			}
		}

		// If we did not find a closing
		// bracket
		if (i == n)
			return false;

		// If closing bracket was next
		// to open
		if (i == 1)
			return check(Arrays.copyOfRange(expr, i + 1, n), n - 2);
		// If closing bracket was somewhere
		// in middle.
		return check(Arrays.copyOfRange(expr, 1, n), i - 1) && check(Arrays.copyOfRange(expr, (i + 1), n), n - i - 1);
	}

	// Driver code
	public static void main(String[] args)
	{
		char expr[] = "[(])".toCharArray();
		int n = expr.length;
		if (check(expr, n))
			System.out.println("Balanced");
		else
			System.out.println("Not Balanced");
	}
}


